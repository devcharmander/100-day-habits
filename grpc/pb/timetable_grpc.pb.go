// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package timetablepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TimetableServiceClient is the client API for TimetableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimetableServiceClient interface {
	AddHabit(ctx context.Context, in *HabitRequest, opts ...grpc.CallOption) (*HabitResponse, error)
}

type timetableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimetableServiceClient(cc grpc.ClientConnInterface) TimetableServiceClient {
	return &timetableServiceClient{cc}
}

func (c *timetableServiceClient) AddHabit(ctx context.Context, in *HabitRequest, opts ...grpc.CallOption) (*HabitResponse, error) {
	out := new(HabitResponse)
	err := c.cc.Invoke(ctx, "/timetable.TimetableService/AddHabit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimetableServiceServer is the server API for TimetableService service.
// All implementations must embed UnimplementedTimetableServiceServer
// for forward compatibility
type TimetableServiceServer interface {
	AddHabit(context.Context, *HabitRequest) (*HabitResponse, error)
	mustEmbedUnimplementedTimetableServiceServer()
}

// UnimplementedTimetableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimetableServiceServer struct {
}

func (*UnimplementedTimetableServiceServer) AddHabit(context.Context, *HabitRequest) (*HabitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHabit not implemented")
}
func (*UnimplementedTimetableServiceServer) mustEmbedUnimplementedTimetableServiceServer() {}

func RegisterTimetableServiceServer(s *grpc.Server, srv TimetableServiceServer) {
	s.RegisterService(&_TimetableService_serviceDesc, srv)
}

func _TimetableService_AddHabit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HabitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimetableServiceServer).AddHabit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timetable.TimetableService/AddHabit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimetableServiceServer).AddHabit(ctx, req.(*HabitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimetableService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timetable.TimetableService",
	HandlerType: (*TimetableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHabit",
			Handler:    _TimetableService_AddHabit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/timetable.proto",
}
